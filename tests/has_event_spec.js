// Generated by CoffeeScript 1.6.2
(function() {
  describe('HasEvent', function() {
    it('is a class', function() {
      return HasEvent.should.be.a('function');
    });
    describe('.check', function() {
      context('less than 3 params', function() {
        return it('throws error', function() {
          var did_throw, err;

          did_throw = false;
          try {
            return HasEvent.check($('.foo'), 'click');
          } catch (_error) {
            err = _error;
            return did_throw = true;
          } finally {
            did_throw.should.be["true"];
          }
        });
      });
      context('1st param not a jQuery object', function() {
        return it('throws error', function() {
          var did_throw, err;

          did_throw = false;
          try {
            return HasEvent.check({}, 'click', function() {
              return 'foo';
            });
          } catch (_error) {
            err = _error;
            return did_throw = true;
          } finally {
            did_throw.should.be["true"];
          }
        });
      });
      context('2nd param not a String', function() {
        return it('throws error', function() {
          var did_throw, err;

          did_throw = false;
          try {
            return HasEvent.check($('.foo'), {}, function() {
              return 'foo';
            });
          } catch (_error) {
            err = _error;
            return did_throw = true;
          } finally {
            did_throw.should.be["true"];
          }
        });
      });
      context('params length is 3', function() {
        return context('3rd param is not a function', function() {
          return it('throws error', function() {
            var did_throw, err;

            did_throw = false;
            try {
              return HasEvent.check($('.foo'), 'click', {});
            } catch (_error) {
              err = _error;
              return did_throw = true;
            } finally {
              did_throw.should.be["true"];
            }
          });
        });
      });
      context('params length is 4', function() {
        context('3rd param is not a String', function() {
          return it('throws error', function() {
            var did_throw, err;

            did_throw = false;
            try {
              return HasEvent.check($('.foo'), 'click', {}, function() {
                return 'foo';
              });
            } catch (_error) {
              err = _error;
              return did_throw = true;
            } finally {
              did_throw.should.be["true"];
            }
          });
        });
        return context('4rth param is not a function', function() {
          return it('throws error', function() {
            var did_throw, err;

            did_throw = false;
            try {
              return HasEvent.check($('.foo'), 'click', '.bar', {});
            } catch (_error) {
              err = _error;
              return did_throw = true;
            } finally {
              did_throw.should.be["true"];
            }
          });
        });
      });
      context('the supplied jQuery element exists', function() {
        beforeEach(function() {
          return $('body').append("<div class=\"foo\">\n  <div>\n    <div class=\"bar\"></div>\n  </div>\n</div>");
        });
        afterEach(function() {
          return $('.foo').remove();
        });
        context('an event handler has been bound', function() {
          context('native event', function() {
            beforeEach(function() {
              this.handler = function() {
                return 'something';
              };
              return $('.foo').on('click.test', this.handler);
            });
            afterEach(function() {
              return $('.foo').off('.test');
            });
            it('returns true', function() {
              return HasEvent.check($('.foo'), 'click', this.handler).should.be["true"];
            });
            return it('makes the plugin return true', function() {
              return $('.foo').hasEvent('click', 'click', this.handler).should.be["true"];
            });
          });
          context('custom event', function() {
            beforeEach(function() {
              this.handler = function() {
                return 'something';
              };
              return $('.foo').on('custom.test', this.handler);
            });
            afterEach(function() {
              return $('.foo').off('.test');
            });
            it('returns true', function() {
              return HasEvent.check($('.foo'), 'custom', this.handler).should.be["true"];
            });
            return it('makes the plugin return true', function() {
              return $('.foo').hasEvent('custom', this.handler).should.be["true"];
            });
          });
          context('delegation', function() {
            beforeEach(function() {
              this.handler = function() {
                return 'foo';
              };
              return $('body').on('click.test', '.foo .bar', this.handler);
            });
            afterEach(function() {
              this.handler = 'something';
              return $('body').off('.test');
            });
            it('returns true', function() {
              return HasEvent.check($('body'), 'click', '.foo .bar', this.handler).should.be["true"];
            });
            return it('makes the plugin return true', function() {
              return $('body').hasEvent('click', '.foo .bar', this.handler).should.be["true"];
            });
          });
          return context('live', function() {
            beforeEach(function() {
              this.handler = function() {
                return 'foo';
              };
              return $(document).on('click.test', '.foo .bar', this.handler);
            });
            afterEach(function() {
              return $(document).off('.test');
            });
            it('returns true', function() {
              return HasEvent.check($(document), 'click', '.foo .bar', this.handler).should.be["true"];
            });
            return it('makes the plugin return true', function() {
              return $(document).hasEvent('click', '.foo .bar', this.handler).should.be["true"];
            });
          });
        });
        context('no event handler has been bound', function() {
          context('default', function() {
            it('returns false', function() {
              return HasEvent.check($('.foo'), 'click', function() {}).should.be["false"];
            });
            return it('makes the plugin return false', function() {
              return $('.foo').hasEvent('click', function() {}).should.be["false"];
            });
          });
          context('delegation', function() {
            it('returns true', function() {
              $('body').off('.test', '.foo .bar');
              return HasEvent.check($('body'), 'click', '.foo .bar', function() {}).should.be["false"];
            });
            return it('makes the plugin return false', function() {
              return $('body').hasEvent('click', '.foo .bar', function() {}).should.be["false"];
            });
          });
          return context('live', function() {
            it('returns false', function() {
              $(document).off('.test');
              return HasEvent.check($(document), 'click', '.foo .bar', function() {}).should.be["false"];
            });
            return it('makes the plugin return false', function() {
              return $(document).hasEvent('click', '.foo .bar', function() {}).should.be["false"];
            });
          });
        });
        return context('there is a cache_obj with no handle property', function() {
          return it('does not throw Error', function() {
            var did_throw, e;

            $('body').data('test', function() {
              return 'test';
            });
            did_throw = false;
            try {
              return HasEvent.check($(document), 'click', '.foo .bar', function() {});
            } catch (_error) {
              e = _error;
              return did_throw = true;
            } finally {
              did_throw.should.not.be["true"];
              $('body').removeData('test');
            }
          });
        });
      });
      context('the target is the window object', function() {
        context('an event handler has been bound', function() {
          beforeEach(function() {
            this.handler = function() {
              return 'foo';
            };
            return $(window).on('scroll.test', this.handler);
          });
          afterEach(function() {
            return $(window).off('.test');
          });
          return it('returns true', function() {
            return HasEvent.check(window, 'scroll', this.handler).should.be["true"];
          });
        });
        return context('no event handler has been bound', function() {
          beforeEach(function() {
            this.handler = function() {
              return 'foo';
            };
            return $(window).off('**');
          });
          it('returns false', function() {
            return HasEvent.check(window, 'scroll', this.handler).should.be["false"];
          });
          return it('makes the jQuery plugin return false', function() {
            return $(window).hasEvent('scroll', this.handler).should.be["false"];
          });
        });
      });
      return context('the supplied jQuery element does not exist', function() {
        it('returns false', function() {
          return HasEvent.check($('.bar'), 'click', function() {}).should.be["false"];
        });
        return it('makes the jQuery plugin return false', function() {
          return $('.bar').hasEvent('click', function() {}).should.be["false"];
        });
      });
    });
    return describe('jQuery plugin', function() {
      return it('is a property on jQuery.fn', function() {
        return jQuery.fn.should.have.property('hasEvent');
      });
    });
  });

}).call(this);
